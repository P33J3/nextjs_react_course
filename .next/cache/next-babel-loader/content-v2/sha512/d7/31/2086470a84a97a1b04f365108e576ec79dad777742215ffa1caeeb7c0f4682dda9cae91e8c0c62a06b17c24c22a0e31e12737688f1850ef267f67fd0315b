{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Coding\\\\Udemy\\\\23 Next-js\\\\nextjs bigger-project\\\\pages\\\\[meetupId]\\\\index.js\";\n//meetupId is in [] as it is a placeholder name for the ID which changes dynamically depending on the page.\nimport { ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetUpDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n}\n\n_c = MeetupDetails;\n; // needed if you run getStaticProps\n//describe all the dynamic adresses\n// export async function getStaticPaths() {\n//   return {\n//     //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page. \n//     fallback: false,\n//     paths: [\n//       {\n//         params: {\n//           meetupId: \"m1\",\n//         },\n//       },\n//       {\n//         params: {\n//           meetupId: \"m2\",\n//         },\n//       },\n//     ],\n//   };\n// };\n\n;\n//   return {\n//     props: {\n//       meetupData: {\n//         image:\"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\n//         id: 'm1',\n//         title:'First Meetup',\n//         address: \"Some Street 5, Some City\",\n//         description: \"This is a first meetup!\",\n//       }\n//     }\n//   }\n// }\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["D:/Coding/Udemy/23 Next-js/nextjs bigger-project/pages/[meetupId]/index.js"],"names":["ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;AAAA;AAEA,SAAsBA,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAKA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACE,QAAC,YAAD;AACA,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFxB;AAGA,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH1B;AAIA,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ9B;AAAA;AAAA;AAAA;AAAA,UADF;AAQH;;KATQN,a;AASR,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoBC;AA4BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,aAAf","sourcesContent":["//meetupId is in [] as it is a placeholder name for the ID which changes dynamically depending on the page.\r\n\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\n\r\nimport MeetupDetail from '../../components/meetups/MeetUpDetail';\r\n\r\n\r\n\r\n\r\nfunction MeetupDetails(props) {\r\n    return (\r\n      <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n      />\r\n    );\r\n};\r\n\r\n// needed if you run getStaticProps\r\n//describe all the dynamic adresses\r\n// export async function getStaticPaths() {\r\n//   return {\r\n//     //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page. \r\n//     fallback: false,\r\n//     paths: [\r\n//       {\r\n//         params: {\r\n//           meetupId: \"m1\",\r\n//         },\r\n//       },\r\n\r\n//       {\r\n//         params: {\r\n//           meetupId: \"m2\",\r\n//         },\r\n//       },\r\n//     ],\r\n//   };\r\n// };\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority'); \r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n//empty object below means find all objects, second criteria searches fields\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n \r\n\r\n  client.close();\r\n  \r\n  return {\r\n    //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page.\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n};\r\n\r\nexport async function getStaticProps(context) {\r\n  \r\n  \r\n  //fetch data for a single meetup\r\n  const meetupId = context.params.meetupId;\r\n// console.log(meetupId);\r\n\r\nconst client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority'); \r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({}, { _id: ObjectmeetupId });\r\n\r\n  console.log(selectedMeetup);\r\n\r\n  client.close();\r\n  \r\n  return {\r\n    props: {\r\n      meetupData: selectedMeetup,\r\n    },\r\n  };\r\n}\r\n\r\n\r\n//   return {\r\n//     props: {\r\n//       meetupData: {\r\n//         image:\"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\r\n//         id: 'm1',\r\n//         title:'First Meetup',\r\n//         address: \"Some Street 5, Some City\",\r\n//         description: \"This is a first meetup!\",\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}
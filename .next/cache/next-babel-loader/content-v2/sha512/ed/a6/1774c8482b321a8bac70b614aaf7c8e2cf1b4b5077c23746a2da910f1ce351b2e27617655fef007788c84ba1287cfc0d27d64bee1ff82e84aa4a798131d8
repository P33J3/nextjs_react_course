{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Coding\\\\Udemy\\\\23 Next-js\\\\nextjs bigger-project\\\\pages\\\\[meetupId]\\\\index.js\";\n//meetupId is in [] as it is a placeholder name for the ID which changes dynamically depending on the page.\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetUpDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\n    title: \"First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"This is a first meetup!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n}\n\n; // needed if you run getStaticProps\n//describe all the dynamic adresses\n// export async function getStaticPaths() {\n//   return {\n//     //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page. \n//     fallback: false,\n//     paths: [\n//       {\n//         params: {\n//           meetupId: \"m1\",\n//         },\n//       },\n//       {\n//         params: {\n//           meetupId: \"m2\",\n//         },\n//       },\n//     ],\n//   };\n// };\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); //empty object below means find all objects, second criteria searches fields\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page.\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\n;\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId; // console.log(meetupId);\n\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  console.log;\n  client.close(); //   return {\n  //     props: {\n  //       meetupData: selectedMeetup,\n  //     },\n  //   };\n  // }\n\n  return {\n    props: {\n      meetupData: {\n        image: \"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\n        id: 'm1',\n        title: 'First Meetup',\n        address: \"Some Street 5, Some City\",\n        description: \"This is a first meetup!\"\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Coding/Udemy/23 Next-js/nextjs bigger-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","meetupData","image","id","title","address","description"],"mappings":";;AAAA;AAEA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAKA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,2EADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQH;;AAAA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,4GAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAJqC,CAKvC;;AACE,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACL;AACAC,IAAAA,QAAQ,EAAE,KAFL;AAGLC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAHF,GAAP;AAOD;AAAA;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAG5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAJ4C,CAK9C;;AAEA,QAAMf,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,4GAApB,CAArB;AACE,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEQ;AAAN,GAA1B,CAA7B;AACAM,EAAAA,OAAO,CAACC,GAAR;AAEAtB,EAAAA,MAAM,CAACS,KAAP,GAf4C,CAiB9C;AACA;AACA;AACA;AACA;AACA;;AAGE,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLyB,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAC,2EADI;AAEVC,QAAAA,EAAE,EAAE,IAFM;AAGVC,QAAAA,KAAK,EAAC,cAHI;AAIVC,QAAAA,OAAO,EAAE,0BAJC;AAKVC,QAAAA,WAAW,EAAE;AALH;AADP;AADF,GAAP;AAWD;AAED,eAAe/B,aAAf","sourcesContent":["//meetupId is in [] as it is a placeholder name for the ID which changes dynamically depending on the page.\r\n\r\nimport { MongoClient } from 'mongodb';\r\n\r\nimport MeetupDetail from '../../components/meetups/MeetUpDetail';\r\n\r\n\r\n\r\n\r\nfunction MeetupDetails(props) {\r\n    return (\r\n      <MeetupDetail\r\n        image=\"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\"\r\n        title=\"First Meetup\"\r\n        address=\"Some Street 5, Some City\"\r\n        description=\"This is a first meetup!\"\r\n      />\r\n    );\r\n};\r\n\r\n// needed if you run getStaticProps\r\n//describe all the dynamic adresses\r\n// export async function getStaticPaths() {\r\n//   return {\r\n//     //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page. \r\n//     fallback: false,\r\n//     paths: [\r\n//       {\r\n//         params: {\r\n//           meetupId: \"m1\",\r\n//         },\r\n//       },\r\n\r\n//       {\r\n//         params: {\r\n//           meetupId: \"m2\",\r\n//         },\r\n//       },\r\n//     ],\r\n//   };\r\n// };\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority'); \r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n//empty object below means find all objects, second criteria searches fields\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n  \r\n  return {\r\n    //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page.\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n};\r\n\r\nexport async function getStaticProps(context) {\r\n  \r\n  \r\n  //fetch data for a single meetup\r\n  const meetupId = context.params.meetupId;\r\n// console.log(meetupId);\r\n\r\nconst client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority'); \r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({_id: meetupId});\r\n  console.log\r\n\r\n  client.close();\r\n  \r\n//   return {\r\n//     props: {\r\n//       meetupData: selectedMeetup,\r\n//     },\r\n//   };\r\n// }\r\n\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        image:\"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\r\n        id: 'm1',\r\n        title:'First Meetup',\r\n        address: \"Some Street 5, Some City\",\r\n        description: \"This is a first meetup!\",\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}
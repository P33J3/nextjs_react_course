{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//meetupId is in [] as it is a placeholder name for the ID which changes dynamically depending on the page.\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetUpDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    })]\n  });\n}\n\n; // needed if you run getStaticProps\n//describe all the dynamic adresses\n// export async function getStaticPaths() {\n//   return {\n//     //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page. \n//     fallback: false,\n//     paths: [\n//       {\n//         params: {\n//           meetupId: \"m1\",\n//         },\n//       },\n//       {\n//         params: {\n//           meetupId: \"m2\",\n//         },\n//       },\n//     ],\n//   };\n// };\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); //empty object below means find all objects, second criteria searches fields\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    //fallbaack:false implies that all pages are covered below; if user inputs another page they get a 404 error page.\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\n;\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId; // console.log(meetupId);\n\n  const client = await MongoClient.connect('mongodb+srv://PJAdmin:9QkEwf687hNyctz@cluster0.ybiuc.mongodb.net/Projectnextjs?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // ObjectId converts variable to MongoDB object\n\n  const selectedMeetup = await meetupsCollection.findOne({}, {\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n} //   return {\n//     props: {\n//       meetupData: {\n//         image:\"https://img.emg-services.net/HtmlPages/HtmlPage13951/large-spain-hola.png\",\n//         id: 'm1',\n//         title:'First Meetup',\n//         address: \"Some Street 5, Some City\",\n//         description: \"This is a first meetup!\",\n//       }\n//     }\n//   }\n// }\n\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}